// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5qEnKKbjrRfdMgFr6HPs6g
// Component: FktXaRCRvA4m

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Youtube from "../../Youtube"; // plasmic-import: YpsomngOlqrH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 5qEnKKbjrRfdMgFr6HPs6g/projectcss
import sty from "./PlasmicReleaseList.module.css"; // plasmic-import: FktXaRCRvA4m/css

createPlasmicElementProxy;

export type PlasmicReleaseList__VariantMembers = {};
export type PlasmicReleaseList__VariantsArgs = {};
type VariantPropType = keyof PlasmicReleaseList__VariantsArgs;
export const PlasmicReleaseList__VariantProps = new Array<VariantPropType>();

export type PlasmicReleaseList__ArgsType = {};
type ArgPropType = keyof PlasmicReleaseList__ArgsType;
export const PlasmicReleaseList__ArgProps = new Array<ArgPropType>();

export type PlasmicReleaseList__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  youtube?: Flex__<typeof Youtube>;
};

export interface DefaultReleaseListProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReleaseList__RenderFunc(props: {
  variants: PlasmicReleaseList__VariantsArgs;
  args: PlasmicReleaseList__ArgsType;
  overrides: PlasmicReleaseList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vQIo)}>
        <Reveal
          className={classNames("__wab_instance", sty.reveal__ku2XG)}
          triggerOnce={true}
        >
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Last Release"}
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f3VbT
            )}
          >
            {
              'Check out "Sorry" by Matunzo Classic\u2014a song brimming with raw emotion and a deep love vibe. Experience the heartfelt journey and let the music move you. Watch the video below to feel the magic.'
            }
          </div>
        </Reveal>
      </div>
      <Youtube
        data-plasmic-name={"youtube"}
        data-plasmic-override={overrides.youtube}
        className={classNames("__wab_instance", sty.youtube)}
      />

      <div className={classNames(projectcss.all, sty.freeBox__qn1HV)}>
        <Reveal
          className={classNames("__wab_instance", sty.reveal__o5BN)}
          triggerOnce={true}
        >
          <div className={classNames(projectcss.all, sty.freeBox__akdh4)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zwhv4
              )}
            >
              {"1.2k"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___275B
              )}
            >
              {"We are thankful for achieving 1k viewers "}
            </div>
          </div>
        </Reveal>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___7EQtn)}>
        <Reveal
          className={classNames("__wab_instance", sty.reveal__v4Eo4)}
          triggerOnce={true}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wxGa2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ymTIb
              )}
            >
              {"15cmt"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i8Rfl
              )}
            >
              {"Thank you for your review of our music."}
            </div>
          </Stack__>
        </Reveal>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "youtube"],
  h2: ["h2"],
  youtube: ["youtube"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  youtube: typeof Youtube;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReleaseList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReleaseList__VariantsArgs;
    args?: PlasmicReleaseList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReleaseList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReleaseList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReleaseList__ArgProps,
          internalVariantPropNames: PlasmicReleaseList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReleaseList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReleaseList";
  } else {
    func.displayName = `PlasmicReleaseList.${nodeName}`;
  }
  return func;
}

export const PlasmicReleaseList = Object.assign(
  // Top-level PlasmicReleaseList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    youtube: makeNodeComponent("youtube"),

    // Metadata about props expected for PlasmicReleaseList
    internalVariantProps: PlasmicReleaseList__VariantProps,
    internalArgProps: PlasmicReleaseList__ArgProps
  }
);

export default PlasmicReleaseList;
/* prettier-ignore-end */
